{

                            Online Pascal Compiler.
                Code, Compile, Run and Debug Pascal program online.
Write your code in this editor and press "Run" button to execute it.

}


program Sort;

const
    sizeArray = 16;
type
   myArray = array [ 0..sizeArray] of integer;
var
   arrayInit, arraySort : myArray;
   randomValue : integer;


function getRandomValue(a, b, seed: integer): integer;
begin
    getRandomValue := a+random(seed)mod b + 1; //Random(b - a) + a
end;

procedure setArray(var a: myArray; length: integer);
var 
    i : integer;
begin
    for i := 0 to length do 
        begin
            a[i] := getRandomValue(0, 30, 150);
            //Write(a[i], ' ');
        end
end;

procedure displayArray(a: myArray; length: integer);
var 
    i : integer;
begin
    for i := 0 to length do
        Write(a[i], ' ');
end;

procedure copyArray(var a, b: myArray; length: integer);
var
    i : integer;
begin
     for i := 0 to length do 
        a[i] := b[i];
end;

procedure selectSort(var a: myArray; length: integer);
var 
    i, j, k, temp : integer;
begin
    i := 0;
    k := 0;
    temp := 0;
    while i < length do
    begin
        for j := i + 1 to length do
        begin
            if(a[j] < a[k] ) then
            begin
                k := j;
            end
        end;
    if ( k <> i) then
    begin
        temp := a[i];
		a[i] := a[k];
		a[k] := temp;
    end;
    i := i + 1;
    k := i;
    end
end;

procedure insertSort(var a: myArray; length: integer);
var
    i, j, temp : integer;
begin
    i := 1;
    j := 1;
    temp := 0;
    while i <= length do
    begin
        temp := a[i];
        while ((j > 0) and (a[j - 1] > temp)) do
        begin
            a[j] := a[j - 1];
            j := j - 1;
        end;
        a[j] := temp;
        i := i + 1;
        j := i;
    end
end;

procedure quickSort(var a: myArray; length, left, right: integer);
var
    i, pointer, temp, pivot : integer;
begin
    if (left < right) then
    begin
        pointer := left;
        temp := 0;
        pivot := a[right];
        for i:= left to right do
        begin
            if (a[i] < pivot) then
            begin
                if(pointer <> i) then
                begin
                    temp := a[pointer];
					a[pointer] := a[i];
					a[i] := temp;
                end;
                pointer := pointer + 1;
            end
        end;
        if (right <> pointer) then
        begin  
            temp := pivot;
			a[right] := a[pointer];
			a[pointer] := temp;
        end;
        quickSort(a, length, left, pointer - 1);
        quickSort(a, length, pointer + 1, right);
    end
end;

procedure quickSortVersion2(var a: myArray; length, left, right: integer);
var
    i, pointerL, pointerR, temp, pivot, index : integer;
begin
    if (left < right) then
    begin
        index := round((left + right) / 2);
        pivot := a[index];
        pointerL := left;
        pointerR := right;
        temp := 0;
        while pointerL < pointerR do
        begin
            while a[pointerL] < pivot do
            begin
                pointerL := pointerL + 1;
            end;
            
            while a[pointerR] > pivot do
            begin
                pointerR := pointerR - 1;
            end;
            
            if (pointerL <= pointerR) then
            begin
                temp := a[pointerL];
				a[pointerL] := a[pointerR];
				a[pointerR] := temp;
				pointerL := pointerL + 1;
				pointerR := pointerR - 1;
            end
        end;
        quickSortVersion2(a, length, left, pointerR);
        quickSortVersion2(a, length, pointerL, right);
    end
end;

function checkSortArray(a: myArray; length: integer): boolean;
var
    result: boolean;
    i: integer;
begin
    result := true;
    for i := 0 to length - 1 do
    begin
        if (a[i] > a[i + 1]) then
        begin
            result := false;
            break;
        end
    end;
    if (result = true) then
    begin
        Writeln('Correct sort');
    end
    else
    begin
        Writeln('Wrong sort');
    end;
    checkSortArray := result;
end;

procedure searchElementInArray(var arrayInit, arraySort: myArray; length: integer);
var
    i, element, position : integer;
    result : boolean;
begin
    element := arraySort[0];
    result := false;
    for i := 0 to length do 
    begin
        if (arrayInit[i] = element) then
        begin
            position := i;
            result := true;
            break;
        end
    end;
    if (result = true) then
    begin
        Writeln('Searched element ', element, ' on position ', position, ' count from 0');
    end
    else
    begin
        Writeln('Search element dont exist in arrary');
    end;
end;

begin
  setArray(arrayInit, sizeArray);
  displayArray(arrayInit, sizeArray);
  checkSortArray(arrayInit, sizeArray);
  copyArray(arraySort, arrayInit, sizeArray);
  writeln();
  //selectSort(arraySort, sizeArray);
  //insertSort(arraySort, sizeArray);
  //quickSort(arraySort, sizeArray, 0, sizeArray);
  quickSortVersion2(arraySort, sizeArray, 0, sizeArray);
  displayArray(arraySort, sizeArray);
  checkSortArray(arraySort, sizeArray);
  searchElementInArray(arrayInit, arraySort, sizeArray);
end.